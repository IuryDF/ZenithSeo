import { NextRequest, NextResponse } from 'next/server'
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
import OpenAI from 'openai'
import { notifyOpenAICreditsExhausted } from '@/lib/email'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// Fun√ß√£o para gerar prompts usando OpenAI
async function generatePrompts(
  niche: string,
  objective: string,
  type: string,
  userPlan: string,
  extras?: {
    customNiche?: string
    targetAudience?: string
    companyName?: string
    additionalInfo?: string
  }
): Promise<string[]> {
  // Configura√ß√£o baseada no plano do usu√°rio
  const modelConfig = {
    free: {
      // Configur√°vel via .env; usar modelos recentes/gratuitos ou de baixo custo
      model: process.env.OPENAI_MODEL_FREE || process.env.NEXT_PUBLIC_OPENAI_MODEL_FREE || "gpt-4o-mini",
      maxTokens: 2000,
      temperature: 0.6,
      variations: 1
    },
    pro: {
      // Configur√°vel via .env; usar modelos recentes/capazes
      model: process.env.OPENAI_MODEL_PRO || process.env.NEXT_PUBLIC_OPENAI_MODEL_PRO || "gpt-4.1",
      maxTokens: undefined as number | undefined, // Sem limite expl√≠cito
      temperature: 0.5,
      variations: 1
    }
  }

  const config = modelConfig[userPlan as keyof typeof modelConfig] || modelConfig.free

  const effectiveNiche = (extras?.customNiche && extras.customNiche.trim().length > 0)
    ? extras.customNiche.trim()
    : niche

  // Sistema de prompts ultra-t√©cnicos baseado no plano
  const systemPrompt = userPlan === 'pro' 
    ? `Voc√™ √© um ESPECIALISTA S√äNIOR em Marketing Digital, SEO T√©cnico, Copywriting Persuasivo e Estrat√©gia de Conte√∫do com 15+ anos de experi√™ncia. 

EXPERTISE T√âCNICA:
- SEO T√©cnico Avan√ßado (Core Web Vitals, Schema Markup, Technical SEO)
- Copywriting Persuasivo (Frameworks AIDA, PAS, Before-After-Bridge)
- Psicologia do Consumidor e Neuromarketing
- Growth Hacking e Conversion Rate Optimization
- Content Marketing Estrat√©gico e Storytelling
- An√°lise de Dados e Performance Marketing

MISS√ÉO: Criar prompts ULTRA-T√âCNICOS, IRRETOC√ÅVEIS e ALTAMENTE PERFORM√ÅTICOS que gerem resultados excepcionais quando executados por qualquer IA.`
    
    : `Voc√™ √© um ESPECIALISTA em Marketing Digital e SEO com s√≥lida experi√™ncia em cria√ß√£o de conte√∫do estrat√©gico.

EXPERTISE:
- SEO e Otimiza√ß√£o de Conte√∫do
- Copywriting Eficaz
- Marketing de Conte√∫do
- Estrat√©gias de Engajamento

MISS√ÉO: Criar prompts ROBUSTOS e T√âCNICOS que gerem resultados de alta qualidade quando executados por IAs.`

  const proProjectData = [
    `‚Ä¢ Nicho/Vertical: ${effectiveNiche}`,
    extras?.customNiche && extras.customNiche.trim() ? `‚Ä¢ Nicho selecionado: ${niche}` : '',
    `‚Ä¢ Objetivo Estrat√©gico: ${objective}`,
    `‚Ä¢ Formato de Conte√∫do: ${type}`,
    extras?.targetAudience && extras.targetAudience.trim() ? `‚Ä¢ P√∫blico-alvo: ${extras.targetAudience.trim()}` : '',
    extras?.companyName && extras.companyName.trim() ? `‚Ä¢ Empresa/Marca: ${extras.companyName.trim()}` : '',
    extras?.additionalInfo && extras.additionalInfo.trim() ? `‚Ä¢ Informa√ß√µes adicionais: ${extras.additionalInfo.trim()}` : ''
  ].filter(Boolean).join('\n')

  const freeProjectData = [
    `‚Ä¢ Nicho: ${effectiveNiche}`,
    extras?.customNiche && extras.customNiche.trim() ? `‚Ä¢ Nicho selecionado: ${niche}` : '',
    `‚Ä¢ Objetivo: ${objective}`,
    `‚Ä¢ Tipo de Conte√∫do: ${type}`,
    extras?.targetAudience && extras.targetAudience.trim() ? `‚Ä¢ P√∫blico-alvo: ${extras.targetAudience.trim()}` : '',
    extras?.companyName && extras.companyName.trim() ? `‚Ä¢ Empresa/Marca: ${extras.companyName.trim()}` : '',
    extras?.additionalInfo && extras.additionalInfo.trim() ? `‚Ä¢ Informa√ß√µes adicionais: ${extras.additionalInfo.trim()}` : ''
  ].filter(Boolean).join('\n')

  const userPrompt = userPlan === 'pro'
    ? `BRIEFING ULTRA-T√âCNICO PARA GERA√á√ÉO DE UM √öNICO MEGA PROMPT PROFISSIONAL:

üìä DADOS DO PROJETO:
${proProjectData}

üéØ ESPECIFICA√á√ïES T√âCNICAS OBRIGAT√ìRIAS:

Para cada prompt, voc√™ DEVE incluir:

1. CONTEXTO ESTRAT√âGICO DETALHADO
2. PERSONA/AVATAR espec√≠fico do p√∫blico-alvo
3. FRAMEWORKS de copywriting aplic√°veis (AIDA, PAS, etc.)
4. DIRETRIZES SEO t√©cnicas espec√≠ficas
5. M√âTRICAS de performance esperadas
6. ESTRUTURA detalhada do conte√∫do
7. CALL-TO-ACTIONS estrat√©gicos
8. ELEMENTOS de prova social/autoridade
9. GATILHOS psicol√≥gicos aplic√°veis
10. DIFERENCIA√á√ÉO competitiva

üî• CRIT√âRIOS DE EXCEL√äNCIA:
- Prompts com 200-300 palavras cada
- Linguagem t√©cnica e profissional
- Instru√ß√µes ultra-espec√≠ficas e acion√°veis
- Foco em resultados mensur√°veis
- Otimiza√ß√£o para convers√£o
- Aplica√ß√£o de neuromarketing

üìà RESULTADO ESPERADO:
1 MEGA PROMPT ULTRA-T√âCNICO que combine o MELHOR de m√∫ltiplas abordagens (conte√∫do e t√©cnicas) em um √∫nico prompt robusto, completo e otimizado para IAs avan√ßadas. Sem limite de caracteres; gere o melhor poss√≠vel.

IMPORTANTE: Retorne APENAS UM PROMPT √∫nico, completo, em texto cont√≠nuo.`

    : `BRIEFING T√âCNICO PARA GERA√á√ÉO DE UM √öNICO PROMPT:

üìä INFORMA√á√ïES DO PROJETO:
${freeProjectData}

üéØ REQUISITOS T√âCNICOS:

Para cada prompt, inclua:
1. Contexto espec√≠fico do nicho
2. P√∫blico-alvo definido
3. Estrutura clara do conte√∫do
4. Diretrizes SEO b√°sicas
5. Call-to-action eficaz
6. Elementos de engajamento

üìà CRIT√âRIOS DE QUALIDADE:
- Prompts com 150-200 palavras cada
- Instru√ß√µes claras e espec√≠ficas
- Foco em resultados pr√°ticos
- Otimiza√ß√£o para SEO
- Linguagem profissional

RESULTADO: ${config.variations} prompts ROBUSTOS que gerem conte√∫do de alta qualidade quando executados por IAs.

Retorne apenas os prompts, um por linha, sem numera√ß√£o ou formata√ß√£o adicional.`

  try {
    // Usar Responses API (mais recente). Concatenar system + user no input.
    const requestParams: any = {
      model: config.model,
      input: `${systemPrompt}\n\n${userPrompt}`,
      temperature: config.temperature,
    }
    if (typeof config.maxTokens === 'number' && config.maxTokens > 0) {
      requestParams.max_output_tokens = config.maxTokens
    }
    const completion = await openai.responses.create(requestParams)

    // Extrair texto de sa√≠da de forma resiliente
    const outputText: string | undefined = (completion as any)?.output_text
    const content = outputText || (completion as any)?.choices?.[0]?.message?.content
    if (!content) {
      throw new Error('Nenhum conte√∫do retornado pela OpenAI')
    }

    // Retornar um √∫nico prompt consolidado
    const singlePrompt = content.trim()
    if (!singlePrompt || singlePrompt.length === 0) {
      throw new Error('Nenhum prompt v√°lido foi gerado')
    }

    return [singlePrompt]
  } catch (error: any) {
    console.error('Erro ao gerar prompts com OpenAI:', error)
    
    // Verificar se √© erro de cr√©ditos/quota da OpenAI
    const isQuotaError = error?.code === 'insufficient_quota' || 
        error?.code === 'invalid_api_key' ||
        error?.status === 429 || 
        error?.status === 503 ||
        error?.error?.code === 'insufficient_quota' ||
        error?.error?.code === 'invalid_api_key' ||
        (error?.message && (error.message.includes('insufficient_quota') || error.message.includes('invalid_api_key') || error.message.includes('model') || error.message.includes('Unsupported')))

    if (isQuotaError) {
      console.log('Erro de cr√©ditos OpenAI detectado:', error?.code || error?.status || 'API error')
      
      // Estrat√©gia baseada no plano do usu√°rio
      if (userPlan === 'free') {
        // Op√ß√£o 1 + 2: Bloquear completamente + For√ßar upgrade
        throw new Error('UPGRADE_REQUIRED')
      } else if (userPlan === 'pro') {
        // Op√ß√£o 4: Notifica√ß√£o + Bloqueio
        // Enviar notifica√ß√£o para admin (implementar depois)
        console.log('üö® Cr√©ditos OpenAI esgotados - Notificando admin para usu√°rio Pro')
        await notifyOpenAICreditsExhausted(userPlan, 'user_id_placeholder')
        throw new Error('OPENAI_CREDITS_EXHAUSTED')
      }
    }
    
    throw new Error('Erro ao gerar prompts com IA')
  }
}

// Fun√ß√£o de fallback para gerar prompts offline ULTRA-T√âCNICOS
function generateOfflinePrompts(niche: string, objective: string, type: string, userPlan: string = 'free'): string[] {
  // Normalizar tipo vindo do frontend para chaves internas
  const normalizedType = (type || '').toLowerCase()
    .normalize('NFD').replace(/\p{Diacritic}/gu, '')
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/[\s/]+/g, '-')

  const typeMap: Record<string, keyof typeof proTemplates> = {
    'artigo-de-blog': 'artigo-blog',
    'artigo-blog': 'artigo-blog',
    'post-para-redes-sociais': 'post-redes-sociais',
    'post-redes-sociais': 'post-redes-sociais',
    'email-marketing': 'email-marketing',
  }
  
  // Templates ultra-t√©cnicos para plano PRO
  const proTemplates = {
    'artigo-blog': [
      `BRIEFING ULTRA-T√âCNICO: Crie um artigo SEO PREMIUM sobre "${niche}" com foco estrat√©gico em ${objective}. 

ESPECIFICA√á√ïES OBRIGAT√ìRIAS:
‚Ä¢ Estrutura: T√≠tulo H1 otimizado + 8-12 H2s + H3s estrat√©gicos
‚Ä¢ Extens√£o: 2500-3500 palavras com densidade de palavra-chave 1-2%
‚Ä¢ SEO T√©cnico: Meta description 155 chars, URL slug otimizada, schema markup Article
‚Ä¢ Copywriting: Framework AIDA + gatilhos de escassez e autoridade
‚Ä¢ P√∫blico-alvo: Persona detalhada com dores espec√≠ficas do nicho ${niche}
‚Ä¢ CTA estrat√©gico: 3 call-to-actions distribu√≠dos (soft, medium, hard sell)
‚Ä¢ Elementos visuais: Sugest√µes para 5-7 imagens/infogr√°ficos com alt-text SEO
‚Ä¢ M√©tricas esperadas: Tempo de perman√™ncia 4+ min, taxa de clique 3%+
‚Ä¢ Diferencia√ß√£o: √Çngulo √∫nico que nenhum concorrente abordou
‚Ä¢ Prova social: Incluir 2-3 estudos de caso ou estat√≠sticas relevantes`,

      `PROMPT PROFISSIONAL S√äNIOR: Desenvolva um guia DEFINITIVO sobre ${niche} para ${objective} seguindo metodologia de Growth Content.

FRAMEWORK T√âCNICO OBRIGAT√ìRIO:
‚Ä¢ Pesquisa de palavras-chave: LSI keywords + long-tail variations
‚Ä¢ Estrutura de pillar content: T√≥pico principal + 5-8 subt√≥picos
‚Ä¢ Copywriting avan√ßado: PAS (Problem-Agitate-Solution) + Before/After/Bridge
‚Ä¢ UX Writing: Scannable content com bullet points e numbered lists
‚Ä¢ Link building interno: 8-12 links internos estrat√©gicos
‚Ä¢ Featured snippet optimization: Resposta direta em 40-60 palavras
‚Ä¢ Engagement hooks: 3 elementos de curiosidade nos primeiros 100 palavras
‚Ä¢ Social proof: Depoimentos, cases ou dados de autoridade
‚Ä¢ Conversion optimization: Lead magnets integrados naturalmente
‚Ä¢ Performance KPIs: CTR org√¢nico 5%+, bounce rate <40%`,

      `BRIEFING DE MARKETING DE CONTE√öDO AVAN√áADO: Produza um artigo VIRAL sobre ${niche} otimizado para ${objective} usando neuromarketing.

ESPECIFICA√á√ïES NEUROL√ìGICAS:
‚Ä¢ Hook psicol√≥gico: Gatilho de curiosidade + gap de informa√ß√£o
‚Ä¢ Storytelling estruturado: Jornada do her√≥i aplicada ao nicho
‚Ä¢ Cognitive load optimization: Par√°grafos 2-3 linhas, frases 15-20 palavras
‚Ä¢ Emotional triggers: 5 gatilhos emocionais distribu√≠dos estrategicamente
‚Ä¢ Authority building: Cita√ß√µes de 3-5 especialistas reconhecidos
‚Ä¢ FOMO integration: Elementos de urg√™ncia e escassez naturais
‚Ä¢ Social validation: Proof points a cada 300-400 palavras
‚Ä¢ Reciprocity principle: Valor gratuito antes de qualquer oferta
‚Ä¢ Commitment consistency: Micro-compromissos do leitor
‚Ä¢ M√©tricas de engajamento: Shares 50+, coment√°rios 20+, tempo 5+ min`
    ],
    
    'post-redes-sociais': [
      `ESTRAT√âGIA DE SOCIAL MEDIA PROFISSIONAL: Crie um post VIRAL para ${niche} focado em ${objective} usando growth hacking.

FRAMEWORK DE VIRALIZA√á√ÉO:
‚Ä¢ Hook magn√©tico: Primeira linha com padr√£o de interrup√ß√£o
‚Ä¢ Storytelling em 3 atos: Setup + Conflito + Resolu√ß√£o em 150 palavras
‚Ä¢ Psychological triggers: Curiosidade + FOMO + prova social
‚Ä¢ Hashtag strategy: 5 hashtags de nicho + 3 trending + 2 branded
‚Ä¢ CTA irresist√≠vel: Pergunta que gera engajamento + direcionamento
‚Ä¢ Visual storytelling: Sugest√£o de carousel/v√≠deo complementar
‚Ä¢ Timing optimization: Melhor hor√°rio para audi√™ncia do ${niche}
‚Ä¢ Engagement bait: Elemento que for√ßa coment√°rios/shares
‚Ä¢ Cross-platform adaptation: Vers√µes para Instagram, LinkedIn, TikTok
‚Ä¢ KPIs esperados: Reach 10x followers, engagement rate 8%+`,

      `COPYWRITING PARA REDES SOCIAIS PREMIUM: Desenvolva uma sequ√™ncia de 5 posts sobre ${niche} para ${objective} com storytelling avan√ßado.

ESTRUTURA NARRATIVA PROFISSIONAL:
‚Ä¢ Post 1: Problem awareness - Identifica√ß√£o da dor
‚Ä¢ Post 2: Problem agitation - Amplifica√ß√£o do problema  
‚Ä¢ Post 3: Solution introduction - Apresenta√ß√£o da solu√ß√£o
‚Ä¢ Post 4: Social proof - Cases e depoimentos
‚Ä¢ Post 5: Call-to-action - Convers√£o estrat√©gica
‚Ä¢ Elementos t√©cnicos: Micro-storytelling, cliffhangers, pattern interrupts
‚Ä¢ Psychological hooks: Reciprocidade, autoridade, escassez
‚Ä¢ Community building: Elementos que criam senso de pertencimento
‚Ä¢ Viral mechanics: Shareability factors integrados
‚Ä¢ Conversion funnel: Jornada completa do awareness ao interesse`
    ],

    'email-marketing': [
      `SEQU√äNCIA DE EMAIL MARKETING PROFISSIONAL: Crie um email de convers√£o PREMIUM para ${niche} focado em ${objective}.

FRAMEWORK DE ALTA CONVERS√ÉO:
‚Ä¢ Subject line: A/B test com 2 op√ß√µes (curiosidade vs benef√≠cio)
‚Ä¢ Preview text: Complemento perfeito ao subject (15-20 palavras)
‚Ä¢ Personalization: Uso estrat√©gico do nome + dados comportamentais
‚Ä¢ Email structure: AIDA + PAS h√≠brido para m√°xima convers√£o
‚Ä¢ Copywriting avan√ßado: Storytelling + obje√ß√µes antecipadas
‚Ä¢ Social proof integration: Depoimentos espec√≠ficos do nicho
‚Ä¢ Urgency/scarcity: Elementos de press√£o temporal aut√™nticos
‚Ä¢ CTA optimization: Bot√£o principal + CTA secund√°rio
‚Ä¢ Mobile optimization: Formata√ß√£o para 80% mobile readers
‚Ä¢ Deliverability: Spam score <2, sender reputation protection
‚Ä¢ KPIs esperados: Open rate 35%+, click rate 8%+, convers√£o 3%+`,

      `EMAIL DE NURTURING ULTRA-T√âCNICO: Desenvolva um email educativo sobre ${niche} para ${objective} usando marketing de relacionamento avan√ßado.

ESTRAT√âGIA DE RELACIONAMENTO:
‚Ä¢ Value-first approach: 80% valor, 20% venda sutil
‚Ä¢ Educational content: Mini-curso em formato de email
‚Ä¢ Expertise demonstration: Conhecimento t√©cnico espec√≠fico
‚Ä¢ Trust building: Transpar√™ncia + vulnerabilidade estrat√©gica
‚Ä¢ Segmentation triggers: Elementos para segmentar lista
‚Ä¢ Behavioral tracking: Links que identificam interesse
‚Ä¢ Progressive profiling: Coleta gradual de informa√ß√µes
‚Ä¢ Retention optimization: Elementos que reduzem unsubscribe
‚Ä¢ Cross-sell preparation: Sementes para ofertas futuras
‚Ä¢ Lifetime value focus: Relacionamento de longo prazo`
    ]
  }

  // Templates robustos para plano FREE
  const freeTemplates = {
    'artigo-blog': [
      `PROMPT T√âCNICO: Escreva um artigo SEO otimizado sobre "${niche}" focando em ${objective}.

REQUISITOS T√âCNICOS:
‚Ä¢ Estrutura: T√≠tulo H1 + 5-7 subt√≠tulos H2 + introdu√ß√£o + conclus√£o
‚Ä¢ Extens√£o: 1500-2000 palavras com boa densidade de palavra-chave
‚Ä¢ SEO b√°sico: Meta description, URL amig√°vel, palavras-chave naturais
‚Ä¢ P√∫blico-alvo: Defina persona espec√≠fica para ${niche}
‚Ä¢ Call-to-action: 2 CTAs estrat√©gicos (meio e final do artigo)
‚Ä¢ Elementos visuais: Sugest√µes para 3-4 imagens relevantes
‚Ä¢ Engajamento: Perguntas para estimular coment√°rios
‚Ä¢ Valor agregado: Dicas pr√°ticas e acion√°veis
‚Ä¢ Diferencia√ß√£o: √Çngulo √∫nico sobre o tema
‚Ä¢ M√©tricas: Foco em tempo de perman√™ncia e compartilhamentos`,

      `BRIEFING ROBUSTO: Crie um guia completo sobre ${niche} para ${objective} com foco em resultados pr√°ticos.

ESPECIFICA√á√ïES:
‚Ä¢ Formato: Guia passo a passo numerado e organizado
‚Ä¢ Conte√∫do: Informa√ß√µes t√©cnicas + exemplos reais
‚Ä¢ SEO: Otimiza√ß√£o para palavras-chave de cauda longa
‚Ä¢ Estrutura: Introdu√ß√£o + 5-8 passos + conclus√£o + pr√≥ximos passos
‚Ä¢ Copywriting: Linguagem clara e persuasiva
‚Ä¢ Autoridade: Cita√ß√µes e refer√™ncias confi√°veis
‚Ä¢ Praticidade: Cada passo deve ser acion√°vel
‚Ä¢ Engajamento: Elementos interativos e questionamentos
‚Ä¢ CTA: Direcionamento claro para pr√≥xima a√ß√£o
‚Ä¢ Valor: Solu√ß√£o completa para a dor do p√∫blico`
    ],

    'post-redes-sociais': [
      `ESTRAT√âGIA DE SOCIAL MEDIA: Crie um post engajante sobre ${niche} para ${objective} com alta taxa de intera√ß√£o.

ELEMENTOS OBRIGAT√ìRIOS:
‚Ä¢ Hook inicial: Primeira linha que prende aten√ß√£o
‚Ä¢ Storytelling: Narrativa envolvente em 100-150 palavras
‚Ä¢ Valor agregado: Dica pr√°tica ou insight relevante
‚Ä¢ Hashtags: 8-10 hashtags estrat√©gicas do nicho
‚Ä¢ Call-to-action: Pergunta que estimula coment√°rios
‚Ä¢ Timing: Melhor hor√°rio para o p√∫blico-alvo
‚Ä¢ Visual: Sugest√£o de imagem ou v√≠deo complementar
‚Ä¢ Engajamento: Elementos que incentivam shares
‚Ä¢ Personalidade: Tom de voz consistente com marca
‚Ä¢ M√©tricas: Foco em alcance e engajamento org√¢nico`,

      `POST T√âCNICO PARA REDES: Desenvolva conte√∫do sobre ${niche} focado em ${objective} usando copywriting eficaz.

FRAMEWORK DE CRIA√á√ÉO:
‚Ä¢ Abertura: Gancho psicol√≥gico ou estat√≠stica impactante
‚Ä¢ Desenvolvimento: Problema + solu√ß√£o em formato digest√≠vel
‚Ä¢ Prova social: Exemplo ou case relevante
‚Ä¢ Hashtags: Mix de populares + nicho + branded
‚Ä¢ CTA: Direcionamento claro e espec√≠fico
‚Ä¢ Formato: Otimizado para cada plataforma
‚Ä¢ Linguagem: Adequada ao p√∫blico do ${niche}
‚Ä¢ Valor: Takeaway claro para o leitor
‚Ä¢ Diferencia√ß√£o: Perspectiva √∫nica sobre o tema
‚Ä¢ Convers√£o: Elemento que direciona para pr√≥ximo passo`
    ]
  }

  // Selecionar templates baseado no plano
  const templates = userPlan === 'pro' ? proTemplates : freeTemplates
  const selectedKey = typeMap[normalizedType] || 'artigo-blog'
  const typeTemplates = templates[selectedKey as keyof typeof templates] || templates['artigo-blog']
  
  // N√∫mero de varia√ß√µes baseado no plano
  const variations = userPlan === 'pro' ? 5 : 3
  
  return typeTemplates
    .slice(0, variations)
    .map(template => template.replace(/\${niche}/g, niche).replace(/\${objective}/g, objective))
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { niche, objective, type, customNiche, targetAudience, companyName, additionalInfo } = body

    // Valida√ß√£o b√°sica
    if (!niche || !objective || !type) {
      return NextResponse.json(
        { error: 'Campos obrigat√≥rios: niche, objective, type' },
        { status: 400 }
      )
    }

    // Criar cliente Supabase com cookies do servidor
    const cookieStore = await cookies()
    
    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          getAll() {
            return cookieStore.getAll()
          },
          setAll(cookiesToSet) {
            try {
              cookiesToSet.forEach(({ name, value, options }) =>
                cookieStore.set(name, value, options)
              )
            } catch {
              // The `setAll` method was called from a Server Component.
              // This can be ignored if you have middleware refreshing
              // user sessions.
            }
          },
        },
      }
    )

    // Verificar autentica√ß√£o
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Usu√°rio n√£o autenticado' },
        { status: 401 }
      )
    }

    const userId = user.id

    // Verificar se o usu√°rio existe e obter dados do plano
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('plan')
      .eq('id', userId)
      .single()

    if (userError || !userData) {
      return NextResponse.json(
        { error: 'Usu√°rio n√£o encontrado' },
        { status: 404 }
      )
    }

    // Verificar limite de uso para usu√°rios free
    if (userData.plan === 'free') {
      // Contar prompts totais do usu√°rio (limite por conta)
      const { count, error: countError } = await supabase
        .from('prompts')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', userId)

      if (countError) {
        console.error('Erro ao contar prompts:', countError)
        return NextResponse.json(
          { error: 'Erro interno do servidor' },
          { status: 500 }
        )
      }

      // Verificar se atingiu o limite (3 prompts por conta para free)
      if (count && count >= 3) {
        return NextResponse.json(
          { 
            error: 'Limite de prompts atingido. Fa√ßa upgrade para o plano Pro para prompts ilimitados.',
            limitReached: true 
          },
          { status: 429 }
        )
      }
    }

    // Gerar prompts com OpenAI; falha deve propagar erro sem fallback
    const prompts: string[] = await generatePrompts(
      niche,
      objective,
      type,
      userData.plan,
      { customNiche, targetAudience, companyName, additionalInfo }
    )

    // Salvar prompts no banco de dados
    const promptsToInsert = prompts.map((prompt: string) => ({
      user_id: userId,
      niche: customNiche && customNiche.trim().length > 0 ? customNiche.trim() : niche,
      objective,
      type,
      content: prompt,
    }))

    const { data: savedPrompts, error: saveError } = await supabase
      .from('prompts')
      .insert(promptsToInsert)
      .select()

    if (saveError) {
      console.error('Erro ao salvar prompts:', saveError)
      return NextResponse.json(
        { error: 'Erro ao salvar prompts' },
        { status: 500 }
      )
    }

    // Atualizar contador de uso - usar contagem real da tabela prompts
    // Contar prompts totais ap√≥s inser√ß√£o
    const { count: totalPrompts, error: countError } = await supabase
      .from('prompts')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', userId)

    const currentCount = totalPrompts || 0

    // Atualizar tabela usage para manter sincroniza√ß√£o
    const { error: usageError } = await supabase
      .from('usage')
      .upsert({
        user_id: userId,
        prompts_generated: currentCount,
        updated_at: new Date().toISOString(),
      })

    if (usageError) {
      console.error('Erro ao atualizar uso:', usageError)
      // N√£o retorna erro aqui pois os prompts j√° foram salvos
    }

    return NextResponse.json({
      success: true,
      prompts: savedPrompts,
      usage: {
        current: currentCount,
        limit: userData.plan === 'free' ? 3 : null,
        plan: userData.plan,
      },
      // Sem fallback: indicador offline removido
    })

  } catch (error) {
    console.error('Erro na API generate:', error)
    
    // Tratamento espec√≠fico para novos tipos de erro
    if (error instanceof Error) {
      if (error.message === 'UPGRADE_REQUIRED') {
        return NextResponse.json(
          { 
            error: 'Para gerar prompts ilimitados gerador pelo ChatGpt Premium da OpenAI, fa√ßa upgrade para o plano Pro!',
            upgradeRequired: true,
            action: 'upgrade',
            benefits: [
              'Prompts ilimitados',
              'ChatGPT pago da OpenAI (mais inteligente)',
              'Respostas mais r√°pidas e precisas',
              'Suporte priorit√°rio'
            ]
          },
          { status: 402 } // Payment Required
        )
      }
      
      if (error.message === 'OPENAI_CREDITS_EXHAUSTED') {
        return NextResponse.json(
          { 
            error: 'Servi√ßo temporariamente indispon√≠vel para manuten√ß√£o. Nossa equipe foi notificada e est√° trabalhando para resolver.',
            temporaryUnavailable: true,
            action: 'wait',
            message: 'Tente novamente em alguns minutos.'
          },
          { status: 503 } // Service Unavailable
        )
      }
      
      // Tratamento espec√≠fico para erros da OpenAI (outros)
      if (error.message.includes('OpenAI')) {
        return NextResponse.json(
          { error: 'Erro ao gerar prompts. Tente novamente.' },
          { status: 503 }
        )
      }
    }

    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}